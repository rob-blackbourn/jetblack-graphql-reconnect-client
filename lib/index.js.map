{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 4915c146e7b6eeeedbd1","webpack:///./src/ReconnectingSubscriber.js","webpack:///./src/RetryFetcher.js","webpack:///./src/index.js"],"names":["maxRetries","protocols","subscriber","setTimeout","fetchProxy","retryCount","fetch","response","resolve","retryOn","retry","error","reject","operationName","method","headers","body","constructor","callback","reconnectableSubscribe","unsubscribeProxy","reschedule","resubscribe"],"mappings":"AAAA,eACA,iDADA,CAEA,kBAFA,CAGA,qCAHA,CAIA,gDAJA,CAKA,wBALA,CAMA,gDANA,CAQA,0CACC,CATD,EASC,kCATD,CASC,WACD,M,aCNA,cAGA,QACA,oBAGA,YACA,GADA,CAEA,IAFA,CAGA,UAHA,EAaA,MANA,mCAMA,CAHA,MAGA,UACA,CAxBA,SA4DA,MAhCA,MAgCA,CA7BA,KA6BA,CA1BA,oBACA,QADA,EAEA,2BACA,eADA,CAEA,aAFA,CAGA,KAHA,EAMA,CAkBA,CAfA,gBACA,sBACA,WAA2B,mBAA4B,CADvD,CAEA,WAAiC,QAAe,CAFhD,CAIA,MADA,aACA,EACA,CASA,CANA,kBAAsD,gDAA+D,CAMrH,CAHA,MAGA,S,gECKe,uBAA8EA,EAA9E,EAA8FC,EAA9F,aAAwH,CACrI,KAAMC,GAAN,mBACA,MAAOA,GAAP,Q,CCpEF,qBAAiDF,EAAjD,UAAkF,CAChF,MAAO,aAAY,OAAqB,CAqBtC,aAA4B,CAC1BG,WAAW,IAAMC,EAAjBD,GAAiBC,CAAjBD,GACD,CAtBD,KAAMC,GAAaC,KAAc,CAC/BC,gBACQ,KAAc,CAClB,GAAIC,SADc,CAEhBC,IAFgB,CAGPC,WAAiBF,EAAjBE,UAAsCT,OAA1C,GAAIS,CAHO,CAIhBC,IAJgB,CAMhBF,IAPNF,SAUSK,KAAS,CACVX,KAAJ,GADc,CAEZU,IAFY,CAIZE,IAdNN,EADF,EAwBAF,IAzBF,CAAO,CA2BR,CAEc,oBAAwDS,EAAxD,UAA4FC,EAA5F,OAA6G,CAC1H,MAAO,KAEL,UAEEC,QAFF,4CAGEC,KAAM,eAAe,qBAGnBH,eAHmB,CAAf,CAHR,CAFK,C,sED7BT,OAA6B,CAC3BI,wBAAmDjB,EAAnDiB,IAA8E,CAC5E,UAD4E,CAE5E,cAF4E,CAG5E,eAH4E,CAI5E,YAJ4E,CAK5E,iBAL4E,CAM5E,iBAN4E,CAO5E,cAAgB,4BACd,KADc,IAEd,KAFc,QAGd,OAAsB,CACpB,IADoB,CAKlB,gBAAqB,WACZ,KAAP,sBAAO,cADT,CALkB,CAGlBC,YANN,CAAgB,GAcjB,CAEDC,mCAAgG,CAS9F,MARAC,eAA+B,QAA2C,OAAiB,CACrFT,2BAA+BA,kBAA/BA,aAAoEA,cAAxE,IADyF,CAEvF,0BAFuF,EAIvF,iBAJuF,CAKvFO,MALuF,CAA3FE,CAA+B,CAQ/B,CAAO,IAAMA,EAAb,WAAaA,EACd,CAEDC,qBAAyE,CACvElB,WAAW,IAAM,CACf,2BADFA,EAEG,KAFHA,MAGD,CAEDmB,sBAA0E,OACpE,oBAAuB,EAAE,KAAF,WAAoB,KAA/C,UADwE,KAEtE,eAAc,UAAd,sBAAc,CAAd,MAFsE,MAMxE,cAAgB,4BACd,KADc,IAEd,KAFc,QAGd,OAAsB,CACpB,GAAI,EAAJ,IAAI,CAAJ,CAEEJ,YAFF,KAGO,IAAIP,2BAA+BA,kBAA/BA,aAAoEA,cAAxE,KACL,0BADK,KAGL,OAAO,MAAP,sBAAO,aAVb,CAAgB,CANwD,CAmBzE,CA7D0B,C,qKEF7B,2D,CAAA,+C,cAAA,6C,IJAA,C","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"jetblack-graphql-reconnect-client\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jetblack-graphql-reconnect-client\"] = factory();\n\telse\n\t\troot[\"jetblack-graphql-reconnect-client\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4915c146e7b6eeeedbd1","import { graphQLSubscriber, EventError } from '@jetblack/graphql-client'\n\nclass ReconnectingSubscriber {\n  constructor (url, options, callback, delay = 1000, maxRetries = 0, protocols) {\n    this.url = url\n    this.options = options\n    this.callback = callback\n    this.delay = delay\n    this.maxRetries = maxRetries\n    this.retryCount = 0\n    this.shutdown = graphQLSubscriber(\n      this.url,\n      this.options,\n      (error, subscribe) => {\n        if (!(error || subscribe)) {\n          // Normal closure.\n          callback(null, null)\n        } else {\n          this.callback(error, (query, variables, operationName, callback) => {\n            return this.reconnectableSubscribe(subscribe, query, variables, operationName, callback, {})\n          })\n        }\n      },\n      protocols)\n  }\n\n  reconnectableSubscribe (subscribe, query, variables, operationName, callback, unsubscribeProxy) {\n    unsubscribeProxy.unsubscribe = subscribe(query, variables, operationName, (error, data) => {\n      if (error instanceof EventError && error.event instanceof CloseEvent && error.event.code !== 1000) {\n        this.reschedule(query, variables, operationName, callback, unsubscribeProxy)\n      } else {\n        this.retryCount = 0\n        callback(error, data)\n      }\n    })\n    return () => unsubscribeProxy.unsubscribe()\n  }\n\n  reschedule (query, variables, operationName, callback, unsubscribeProxy) {\n    setTimeout(() => {\n      this.resubscribe(query, variables, operationName, callback, unsubscribeProxy)\n    }, this.delay)\n  }\n\n  resubscribe (query, variables, operationName, callback, unsubscribeProxy) {\n    if (this.maxRetries > 0 && ++this.retryCount > this.maxRetries) {\n      this.callback(new Error('Max retries exceeded'), null)\n      return\n    }\n\n    this.shutdown = graphQLSubscriber(\n      this.url,\n      this.options,\n      (error, subscribe) => {\n        if (!(error || subscribe)) {\n          // Normal closure\n          callback(null, null)\n        } else if (error instanceof EventError && error.event instanceof CloseEvent && error.event.code !== 1000) {\n          this.reschedule(query, variables, operationName, callback, unsubscribeProxy)\n        } else {\n          return this.reconnectableSubscribe(subscribe, query, variables, operationName, callback, unsubscribeProxy)\n        }\n      })\n  }\n}\n\nexport default function graphQLReconnectingSubscriber (url, options, callback, delay = 1000, maxRetries = 0, protocols = 'graphql-ws') {\n  const subscriber = new ReconnectingSubscriber(url, options, callback, delay, maxRetries, protocols)\n  return subscriber.shutdown\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/ReconnectingSubscriber.js","function retryFetch (url, options, delay = 1000, maxRetries = 0, retryOn = [503]) {\n  return new Promise((resolve, reject) => {\n    const fetchProxy = retryCount => {\n      fetch(url, options)\n        .then((response) => {\n          if (response.status < 400) {\n            resolve(response)\n          } else if (retryOn.includes(response.status) && (maxRetries === 0 || retryCount < maxRetries)) {\n            retry(retryCount)\n          } else {\n            resolve(response)\n          }\n        })\n        .catch(error => {\n          if (maxRetries > 0 && retryCount < maxRetries) {\n            retry(retryCount)\n          } else {\n            reject(error)\n          }\n        })\n    }\n\n    function retry (retryCount) {\n      setTimeout(() => fetchProxy(++retryCount), delay)\n    }\n\n    fetchProxy(0)\n  })\n}\n\nexport default function graphQLRetryFetch (url, query, variables = {}, operationName = null, headers = {}, method = 'post') {\n  return retryFetch(\n    url,\n    {\n      method,\n      headers: { ...headers, 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        query,\n        variables,\n        operationName\n      })\n    })\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/RetryFetcher.js","export { default as graphQLReconnectingSubscriber } from './ReconnectingSubscriber'\nexport { default as graphQLRetryFetch } from './RetryFetcher'\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}